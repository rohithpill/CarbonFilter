// <auto-generated />
using System;
using CarbonFilter.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarbonFilterAPI.Migrations
{
    [DbContext(typeof(SurveyDbContext))]
    partial class SurveyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarbonFilter.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Energy/Electricty"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Transportation"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Food by Meal Type"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Food by Items"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Water"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Waste Management"
                        });
                });

            modelBuilder.Entity("CarbonFilter.Models.DropDown", b =>
                {
                    b.Property<int>("DropDownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DropDownId"));

                    b.Property<string>("DropDownName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DropDownUnit")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DropDownId");

                    b.ToTable("DropDowns");

                    b.HasData(
                        new
                        {
                            DropDownId = 1,
                            DropDownName = "People"
                        },
                        new
                        {
                            DropDownId = 2,
                            DropDownName = "Electricity",
                            DropDownUnit = "units"
                        },
                        new
                        {
                            DropDownId = 3,
                            DropDownName = "Fuel",
                            DropDownUnit = "liters"
                        },
                        new
                        {
                            DropDownId = 4,
                            DropDownName = "Travel",
                            DropDownUnit = "km"
                        },
                        new
                        {
                            DropDownId = 5,
                            DropDownName = "Meals",
                            DropDownUnit = "meals per week"
                        },
                        new
                        {
                            DropDownId = 6,
                            DropDownName = "Water",
                            DropDownUnit = "liters"
                        },
                        new
                        {
                            DropDownId = 7,
                            DropDownName = "WasteWeight",
                            DropDownUnit = "kg"
                        },
                        new
                        {
                            DropDownId = 8,
                            DropDownName = "WastePercentage",
                            DropDownUnit = "%"
                        },
                        new
                        {
                            DropDownId = 9,
                            DropDownName = "Age"
                        });
                });

            modelBuilder.Entity("CarbonFilter.Models.DropDownOption", b =>
                {
                    b.Property<int>("DropDownOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DropDownOptionId"));

                    b.Property<int?>("DropDownId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(10,4)");

                    b.HasKey("DropDownOptionId");

                    b.HasIndex("DropDownId");

                    b.ToTable("DropDownOptions");

                    b.HasData(
                        new
                        {
                            DropDownOptionId = 1,
                            DropDownId = 1,
                            MinValue = 1m
                        },
                        new
                        {
                            DropDownOptionId = 2,
                            DropDownId = 1,
                            MinValue = 2m
                        },
                        new
                        {
                            DropDownOptionId = 3,
                            DropDownId = 1,
                            MinValue = 3m
                        },
                        new
                        {
                            DropDownOptionId = 4,
                            DropDownId = 1,
                            MinValue = 4m
                        },
                        new
                        {
                            DropDownOptionId = 5,
                            DropDownId = 1,
                            MinValue = 5m
                        },
                        new
                        {
                            DropDownOptionId = 6,
                            DropDownId = 1,
                            MinValue = 6m
                        },
                        new
                        {
                            DropDownOptionId = 7,
                            DropDownId = 1,
                            MinValue = 7m
                        },
                        new
                        {
                            DropDownOptionId = 8,
                            DropDownId = 1,
                            MinValue = 8m
                        },
                        new
                        {
                            DropDownOptionId = 9,
                            DropDownId = 1,
                            MinValue = 9m
                        },
                        new
                        {
                            DropDownOptionId = 10,
                            DropDownId = 1,
                            MinValue = 10m
                        },
                        new
                        {
                            DropDownOptionId = 11,
                            DropDownId = 2,
                            MaxValue = 50m,
                            MinValue = 0m
                        },
                        new
                        {
                            DropDownOptionId = 12,
                            DropDownId = 2,
                            MaxValue = 100m,
                            MinValue = 50m
                        },
                        new
                        {
                            DropDownOptionId = 13,
                            DropDownId = 2,
                            MaxValue = 150m,
                            MinValue = 100m
                        },
                        new
                        {
                            DropDownOptionId = 14,
                            DropDownId = 2,
                            MaxValue = 200m,
                            MinValue = 150m
                        },
                        new
                        {
                            DropDownOptionId = 15,
                            DropDownId = 2,
                            MaxValue = 250m,
                            MinValue = 200m
                        },
                        new
                        {
                            DropDownOptionId = 16,
                            DropDownId = 2,
                            MaxValue = 300m,
                            MinValue = 250m
                        },
                        new
                        {
                            DropDownOptionId = 17,
                            DropDownId = 2,
                            MaxValue = 400m,
                            MinValue = 300m
                        },
                        new
                        {
                            DropDownOptionId = 18,
                            DropDownId = 2,
                            MaxValue = 500m,
                            MinValue = 400m
                        },
                        new
                        {
                            DropDownOptionId = 19,
                            DropDownId = 2,
                            MaxValue = 750m,
                            MinValue = 500m
                        },
                        new
                        {
                            DropDownOptionId = 20,
                            DropDownId = 2,
                            MaxValue = 1000m,
                            MinValue = 750m
                        },
                        new
                        {
                            DropDownOptionId = 21,
                            DropDownId = 3,
                            MaxValue = 20m,
                            MinValue = 0m
                        },
                        new
                        {
                            DropDownOptionId = 22,
                            DropDownId = 3,
                            MaxValue = 40m,
                            MinValue = 20m
                        },
                        new
                        {
                            DropDownOptionId = 23,
                            DropDownId = 3,
                            MaxValue = 60m,
                            MinValue = 40m
                        },
                        new
                        {
                            DropDownOptionId = 24,
                            DropDownId = 3,
                            MaxValue = 80m,
                            MinValue = 60m
                        },
                        new
                        {
                            DropDownOptionId = 25,
                            DropDownId = 3,
                            MaxValue = 100m,
                            MinValue = 80m
                        },
                        new
                        {
                            DropDownOptionId = 26,
                            DropDownId = 4,
                            MinValue = 0m
                        },
                        new
                        {
                            DropDownOptionId = 27,
                            DropDownId = 4,
                            MaxValue = 50m,
                            MinValue = 1m
                        },
                        new
                        {
                            DropDownOptionId = 28,
                            DropDownId = 4,
                            MaxValue = 100m,
                            MinValue = 51m
                        },
                        new
                        {
                            DropDownOptionId = 29,
                            DropDownId = 4,
                            MaxValue = 200m,
                            MinValue = 101m
                        },
                        new
                        {
                            DropDownOptionId = 30,
                            DropDownId = 4,
                            MaxValue = 300m,
                            MinValue = 201m
                        },
                        new
                        {
                            DropDownOptionId = 31,
                            DropDownId = 4,
                            MaxValue = 400m,
                            MinValue = 301m
                        },
                        new
                        {
                            DropDownOptionId = 32,
                            DropDownId = 4,
                            MaxValue = 500m,
                            MinValue = 401m
                        },
                        new
                        {
                            DropDownOptionId = 33,
                            DropDownId = 4,
                            MaxValue = 600m,
                            MinValue = 501m
                        },
                        new
                        {
                            DropDownOptionId = 34,
                            DropDownId = 4,
                            MaxValue = 700m,
                            MinValue = 601m
                        },
                        new
                        {
                            DropDownOptionId = 35,
                            DropDownId = 4,
                            MaxValue = 800m,
                            MinValue = 701m
                        },
                        new
                        {
                            DropDownOptionId = 36,
                            DropDownId = 4,
                            MaxValue = 900m,
                            MinValue = 801m
                        },
                        new
                        {
                            DropDownOptionId = 37,
                            DropDownId = 4,
                            MaxValue = 1000m,
                            MinValue = 901m
                        },
                        new
                        {
                            DropDownOptionId = 38,
                            DropDownId = 5,
                            MaxValue = 5m,
                            MinValue = 0m
                        },
                        new
                        {
                            DropDownOptionId = 39,
                            DropDownId = 5,
                            MaxValue = 10m,
                            MinValue = 6m
                        },
                        new
                        {
                            DropDownOptionId = 40,
                            DropDownId = 5,
                            MaxValue = 15m,
                            MinValue = 11m
                        },
                        new
                        {
                            DropDownOptionId = 41,
                            DropDownId = 5,
                            MaxValue = 20m,
                            MinValue = 16m
                        },
                        new
                        {
                            DropDownOptionId = 42,
                            DropDownId = 6,
                            MaxValue = 10m,
                            MinValue = 0m
                        },
                        new
                        {
                            DropDownOptionId = 43,
                            DropDownId = 6,
                            MaxValue = 20m,
                            MinValue = 10m
                        },
                        new
                        {
                            DropDownOptionId = 44,
                            DropDownId = 6,
                            MaxValue = 30m,
                            MinValue = 20m
                        },
                        new
                        {
                            DropDownOptionId = 45,
                            DropDownId = 6,
                            MaxValue = 40m,
                            MinValue = 30m
                        },
                        new
                        {
                            DropDownOptionId = 46,
                            DropDownId = 6,
                            MaxValue = 50m,
                            MinValue = 40m
                        },
                        new
                        {
                            DropDownOptionId = 47,
                            DropDownId = 6,
                            MaxValue = 60m,
                            MinValue = 50m
                        },
                        new
                        {
                            DropDownOptionId = 48,
                            DropDownId = 6,
                            MaxValue = 70m,
                            MinValue = 60m
                        },
                        new
                        {
                            DropDownOptionId = 49,
                            DropDownId = 6,
                            MaxValue = 80m,
                            MinValue = 70m
                        },
                        new
                        {
                            DropDownOptionId = 50,
                            DropDownId = 6,
                            MaxValue = 90m,
                            MinValue = 80m
                        },
                        new
                        {
                            DropDownOptionId = 51,
                            DropDownId = 6,
                            MaxValue = 100m,
                            MinValue = 90m
                        },
                        new
                        {
                            DropDownOptionId = 52,
                            DropDownId = 7,
                            MaxValue = 2m,
                            MinValue = 0m
                        },
                        new
                        {
                            DropDownOptionId = 53,
                            DropDownId = 7,
                            MaxValue = 5m,
                            MinValue = 2m
                        },
                        new
                        {
                            DropDownOptionId = 54,
                            DropDownId = 7,
                            MaxValue = 10m,
                            MinValue = 5m
                        },
                        new
                        {
                            DropDownOptionId = 55,
                            DropDownId = 7,
                            MaxValue = 15m,
                            MinValue = 10m
                        },
                        new
                        {
                            DropDownOptionId = 56,
                            DropDownId = 7,
                            MaxValue = 20m,
                            MinValue = 15m
                        },
                        new
                        {
                            DropDownOptionId = 57,
                            DropDownId = 7,
                            MaxValue = 25m,
                            MinValue = 20m
                        },
                        new
                        {
                            DropDownOptionId = 58,
                            DropDownId = 7,
                            MaxValue = 30m,
                            MinValue = 25m
                        },
                        new
                        {
                            DropDownOptionId = 59,
                            DropDownId = 8,
                            MinValue = 0m
                        },
                        new
                        {
                            DropDownOptionId = 60,
                            DropDownId = 8,
                            MinValue = 10m
                        },
                        new
                        {
                            DropDownOptionId = 61,
                            DropDownId = 8,
                            MinValue = 20m
                        },
                        new
                        {
                            DropDownOptionId = 62,
                            DropDownId = 8,
                            MinValue = 30m
                        },
                        new
                        {
                            DropDownOptionId = 63,
                            DropDownId = 8,
                            MinValue = 40m
                        },
                        new
                        {
                            DropDownOptionId = 64,
                            DropDownId = 8,
                            MinValue = 50m
                        },
                        new
                        {
                            DropDownOptionId = 65,
                            DropDownId = 8,
                            MinValue = 60m
                        },
                        new
                        {
                            DropDownOptionId = 66,
                            DropDownId = 8,
                            MinValue = 70m
                        },
                        new
                        {
                            DropDownOptionId = 67,
                            DropDownId = 8,
                            MinValue = 80m
                        },
                        new
                        {
                            DropDownOptionId = 68,
                            DropDownId = 8,
                            MinValue = 90m
                        },
                        new
                        {
                            DropDownOptionId = 69,
                            DropDownId = 8,
                            MinValue = 100m
                        },
                        new
                        {
                            DropDownOptionId = 70,
                            DropDownId = 9,
                            MaxValue = 20m,
                            MinValue = 0m
                        },
                        new
                        {
                            DropDownOptionId = 71,
                            DropDownId = 9,
                            MaxValue = 40m,
                            MinValue = 20m
                        },
                        new
                        {
                            DropDownOptionId = 72,
                            DropDownId = 9,
                            MaxValue = 60m,
                            MinValue = 40m
                        },
                        new
                        {
                            DropDownOptionId = 73,
                            DropDownId = 9,
                            MaxValue = 80m,
                            MinValue = 60m
                        });
                });

            modelBuilder.Entity("CarbonFilter.Models.PickListItem", b =>
                {
                    b.Property<int>("PickListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PickListItemId"));

                    b.Property<string>("PickListItemDescription")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PickListItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("PickListItemId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PickListItems");

                    b.HasData(
                        new
                        {
                            PickListItemId = 1,
                            PickListItemName = "Regular Utility",
                            QuestionId = 2
                        },
                        new
                        {
                            PickListItemId = 2,
                            PickListItemName = "Diesel Generator",
                            QuestionId = 2
                        },
                        new
                        {
                            PickListItemId = 3,
                            PickListItemDescription = "Solar energy produced can either be used for 'Self-use' and power household activities- Reducing the need to draw further electricity from the grid OR 'Net Metering' - Produced Solar energy can be used to offset electricity units in a given period. I think its worth capturing if the individual follows any of this practice",
                            PickListItemName = "Solar",
                            QuestionId = 2
                        },
                        new
                        {
                            PickListItemId = 4,
                            PickListItemName = "Petrol",
                            QuestionId = 3
                        },
                        new
                        {
                            PickListItemId = 5,
                            PickListItemName = "Diesel",
                            QuestionId = 3
                        },
                        new
                        {
                            PickListItemId = 6,
                            PickListItemName = "Car Taxi",
                            QuestionId = 4
                        },
                        new
                        {
                            PickListItemId = 7,
                            PickListItemName = "Bike Taxi",
                            QuestionId = 4
                        },
                        new
                        {
                            PickListItemId = 8,
                            PickListItemName = "Auto Taxi",
                            QuestionId = 4
                        },
                        new
                        {
                            PickListItemId = 9,
                            PickListItemName = "Bus",
                            QuestionId = 4
                        },
                        new
                        {
                            PickListItemId = 10,
                            PickListItemName = "Rail",
                            QuestionId = 4
                        },
                        new
                        {
                            PickListItemId = 11,
                            PickListItemName = "Air",
                            QuestionId = 4
                        },
                        new
                        {
                            PickListItemId = 12,
                            PickListItemName = "Vegetarian",
                            QuestionId = 5
                        },
                        new
                        {
                            PickListItemId = 13,
                            PickListItemName = "Non-Vegetarian",
                            QuestionId = 5
                        },
                        new
                        {
                            PickListItemId = 14,
                            PickListItemName = "Bottled Drinking Water",
                            QuestionId = 6
                        },
                        new
                        {
                            PickListItemId = 15,
                            PickListItemName = "Canned Drinking Water",
                            QuestionId = 6
                        },
                        new
                        {
                            PickListItemId = 16,
                            PickListItemName = "Home Purified Water",
                            QuestionId = 6
                        },
                        new
                        {
                            PickListItemId = 17,
                            PickListItemName = "General Household Water Consumption",
                            QuestionId = 6
                        });
                });

            modelBuilder.Entity("CarbonFilter.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("DropDownId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("InfoNotes")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("QuestionNum")
                        .HasColumnType("int");

                    b.Property<string>("kgCo2eEmissions")
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("QuestionId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DropDownId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            CategoryId = 1,
                            DropDownId = 1,
                            QuestionName = "How many people live in your household?",
                            QuestionNum = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            CategoryId = 1,
                            DropDownId = 2,
                            QuestionName = "How many electricity units does your household consume in a month?",
                            QuestionNum = 2
                        },
                        new
                        {
                            QuestionId = 3,
                            CategoryId = 2,
                            DropDownId = 3,
                            QuestionName = "How many liters of fuel does your household consume in a month through personal vehicles? ",
                            QuestionNum = 3
                        },
                        new
                        {
                            QuestionId = 4,
                            CategoryId = 2,
                            DropDownId = 4,
                            QuestionName = "How many kilometers does your household travel in public transportation per month?",
                            QuestionNum = 4
                        },
                        new
                        {
                            QuestionId = 5,
                            CategoryId = 3,
                            DropDownId = 5,
                            QuestionName = "On average, how many meals are consumed per week by a person in your household?",
                            QuestionNum = 5
                        },
                        new
                        {
                            QuestionId = 6,
                            CategoryId = 5,
                            DropDownId = 6,
                            QuestionName = "How many liters of water does your household consume in a week?",
                            QuestionNum = 6
                        },
                        new
                        {
                            QuestionId = 7,
                            CategoryId = 6,
                            DropDownId = 7,
                            InfoNotes = "According to Central Pollution Control Board in India, the average amount of waste generated per capita per day in urban areas is 0.62 kg. This translates to approximately 17.36 kg of waste generated by an average household of 4 in a week.",
                            QuestionName = "How much waste is generated in a week by your household?",
                            QuestionNum = 7
                        },
                        new
                        {
                            QuestionId = 8,
                            CategoryId = 6,
                            DropDownId = 8,
                            QuestionName = "->What Portion of it is recycled",
                            QuestionNum = 8
                        },
                        new
                        {
                            QuestionId = 9,
                            CategoryId = 6,
                            DropDownId = 8,
                            QuestionName = "->What Portion of it is composted",
                            QuestionNum = 9
                        },
                        new
                        {
                            QuestionId = 10,
                            CategoryId = 6,
                            DropDownId = 9,
                            QuestionName = "What is the average age of the people in your household?",
                            QuestionNum = 10
                        });
                });

            modelBuilder.Entity("CarbonFilter.Models.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<int?>("DropDownOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("InfoNotes")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("PickListItemId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("kgCo2eEmissions")
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("ResponseId");

                    b.HasIndex("DropDownOptionId");

                    b.HasIndex("PickListItemId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("CarbonFilter.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("UserFootPrint")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("UserMobileNumber")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarbonFilter.Models.UserResponse", b =>
                {
                    b.Property<int>("UserResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserResponseId"));

                    b.Property<int>("ResponseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserResponseId");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserResponses");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resources")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("CarbonFilter.Models.DropDownOption", b =>
                {
                    b.HasOne("CarbonFilter.Models.DropDown", "DropDown")
                        .WithMany("DropDownOptions")
                        .HasForeignKey("DropDownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DropDown");
                });

            modelBuilder.Entity("CarbonFilter.Models.PickListItem", b =>
                {
                    b.HasOne("CarbonFilter.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CarbonFilter.Models.Question", b =>
                {
                    b.HasOne("CarbonFilter.Models.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarbonFilter.Models.DropDown", "DropDown")
                        .WithMany()
                        .HasForeignKey("DropDownId");

                    b.Navigation("Category");

                    b.Navigation("DropDown");
                });

            modelBuilder.Entity("CarbonFilter.Models.Response", b =>
                {
                    b.HasOne("CarbonFilter.Models.DropDownOption", "DropDownOption")
                        .WithMany()
                        .HasForeignKey("DropDownOptionId");

                    b.HasOne("CarbonFilter.Models.PickListItem", "PickListItem")
                        .WithMany()
                        .HasForeignKey("PickListItemId");

                    b.HasOne("CarbonFilter.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DropDownOption");

                    b.Navigation("PickListItem");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CarbonFilter.Models.UserResponse", b =>
                {
                    b.HasOne("CarbonFilter.Models.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarbonFilter.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("CarbonFilter.Models.Category", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("CarbonFilter.Models.DropDown", b =>
                {
                    b.Navigation("DropDownOptions");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
